% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/worker.R
\name{startLocalWorkers}
\alias{startLocalWorkers}
\alias{stopLocalWorkers}
\title{Start one or more background R worker processes on the local system.}
\usage{
startLocalWorkers(
  n,
  queue = getOption("future.redis.queue", "{{session}}"),
  config = redis_config(),
  iter = Inf,
  linger = 10,
  log = nullfile(),
  Rbin = paste(R.home(component = "bin"), "R", sep = "/")
)

stopLocalWorkers(
  queue = getOption("future.redis.queue", "{{session}}"),
  config = redis_config()
)
}
\arguments{
\item{n}{number of workers to start.}

\item{queue}{Redis task queue name.}

\item{config}{A \link[redux:redis_config]{redux::redis_config} Redis configuration object.}

\item{iter}{Maximum number of tasks to acquire before exiting.}

\item{linger}{in seconds, max time before system checks (including
termination).}

\item{log}{divert stdout and messages to log file.}

\item{Rbin}{full path to the command-line R program.}
}
\value{
\code{startLocalWorkers()} returns, invisibly, a \code{RedisWorkerConfiguration}
object, which comprise of the arguments passed to each of the background
workers on startup.

\code{stopLocalWorkers()} returns nothing.
}
\description{
Use \code{startLocalWorkers()} to start one or more \strong{future.redis} R worker
processes in the background. The worker processes are started on the local
system using the \code{\link[=worker]{worker()}} function.  Additional workers can be launched
by calling \code{startLocalWorkers()} multiple times.
}
\details{
\code{stopLocalWorkers()} can remove the task queue for these workers. All
workers that listen to the task queue will self-terminate after a
\code{linger} interval (seconds) if the task queue is no longer available,
or if network communication with the Redis server encounters an error.

When passing an \code{RedisWorkerConfiguration} object to \code{startLocalWorkers()}
and \code{stopLocalWorkers()}, the \code{queue} and \code{config} values are extracted
from that object.
}
\examples{
## The example assumes that a Redis server is running
## on the local host and the standard Redis port (6379)
if (redux::redis_available()) {

# Start two local R worker processes running in the background
workers <- startLocalWorkers(2L, linger = 1.0)

plan(redis)

# A function that returns a future, note that N uses lexical scoping...
f <- \() future({4 * sum((runif(N) ^ 2 + runif(N) ^ 2) < 1) / N}, seed = TRUE)

# Run a simple sampling approximation of pi in parallel using  M * N points:
N <- 1e6  # samples per worker
M <- 10   # iterations
pi_est <- Reduce(sum, Map(value, replicate(M, f()))) / M
print(pi_est)

# Make sure to stop the workers
stopLocalWorkers(workers)

}
}
\seealso{
\code{\link[redux:redis_config]{redux::redis_config()}}, \code{\link[=worker]{worker()}}, \code{\link[=removeQ]{removeQ()}}
}
